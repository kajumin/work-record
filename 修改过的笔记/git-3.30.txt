=========================
1.在一个开发分支开发完一个功能提交后, 合并到master分支上, 需要(在master分支上)pull获取到最新代码, 
再创建一个开发分支进行下一个功能开发, 如果忘记了使用git stash / git stash pop
2.团队成员先提交了, 自己提交需要commit到本地仓库, 再拉取代码, 再提交commit, 再推送到远程.
3.远程仓库已有项目结构, 本地也有项目结构
   git remote add origin ssh 
   git pull origin master 报错: refusing to merge unrelated histories
   git pull origin master --allow-unrelated-histories  然后需要解决冲突(修改文件)
               Automatic merge failed; fix conflicts and then commit the result.(上一个报错)
   git add commit 提交后即可解决冲突
   然后在master上创建分支进行开发

4.git commit  --amend  修改提交信息
   i修改   esc退出  :wq 保存并关闭   :q!强制关闭
=========================
githud.com  -> githud.com.cnpmjs.org   解决git clone太慢的问题
======================基础流程
git init //初始化git仓库    Initialized empty Git repository  初始化了一个空的仓库  多出.git文件夹
git status //查看文件状态  On branch master分支   nocommits没有提交 untracked files
git add 文件列表(.)  //追踪文件   文件夹(git add src)
git commit -m 提交信息  //向仓库提交代码
git commit --amend --no-edit //修复提交但不修改提交信息   --amend -m(修改提交信息)  --amend(弹出修改输入框) 
git log  //查看提交的历史记录  commit提交id  Author提交人姓名邮箱  Date提交时间

=======================撤销
git checkout 文件名        //将暂存区的文件覆盖工作目录中的文件  文件夹(git checkout src)
git rm --cached 文件名   //将文件从暂存区中删除   没有最新修改之前可以删除
git reset --hard <commit>    //将提交记录中覆盖暂存区和工作目录
git reset --soft  <commit> //将当前分支的指针指向为指定commit(该提交之后的提交都会被移除, 但保持暂存区和工作区不变
git restore 文件名  //工作区删除的文件可以恢复  删除后的文件也应该add, 才会被删除 

=======================分支  当前目录中代码的一个副本
主分支:  第一个向git仓库提交更新记录时自动产生一个分支  保持稳定性
开发分支:  作为开发分支, 基于master分支创建   
功能分支:  基于开发分区创建的  功能开发完成后可以删除
git branch  //查看分支   绿色星号则为当前   -a(包括远程分支)
git branch  分支名   //创建分支
git checkout 分支名 //切换分支   (应该提交之后再切换) 从开发分支到主分支, 文件应该减少
git merge 来源分支  //合并分支   开发分支能修改主分支的文件
git branch -d 分支名称 //删除分支  分支没有合并 不能删除   强制删除(-D)
git checkout -b aaa  //创建并切换
git checkout -b aaa master  //创建并切换, 基于master分支
git branch -m branchname //修改当前分支名

切换分支 不提交
git stash   暂时存起来, add的文件会看不到, 然后就可以切换分支了(看不到)
git stash pop  将暂存的取出来, 然后可以看到文件
====================pull/push
git push origin 本地分支名: 远程分支名   //只写一个  本地与远程相同
git push origin :远程分支   //删除远程分支  相当于推送一个空的本地分支到远程分支  git push origin --delete master
================================注意
(1)开发分支  可以修改主分支的代码  只要add  commit pull
(2)添加了origin_ssh远程仓库别名

=======================远程仓库
github: 多人共享一个仓库, 开发人员在本地开发
多人开发的流程 :  A(产品经理)  B(开发人员)
A: 本地创建仓库, 创建远程仓库, 
B: 克隆远程仓库到本地进行开发, 将本地仓库中开发的内容推送到远程仓库
最后:  A将远程仓库中的最新内容拉取到本地

程序员A做的事情: 
本地:  git   init   add   commit
远程:  new repository
推送到远程仓库:
(1)git push 远程仓库地址  分支名称   //登录账号密码就可以了
git remote add origin_ssh git@github.com:kajumin/git-test.git   //设置ssh别名
git remote remove origin_ssh  //删除远程仓库别名

程序员B做到事情:
(1)git clone   远程仓库地址  //替换国内镜像github.com.cnpmjs.org || git.sdut.me/
(2)git add commit 之后  A在setting->manage access邀请, B在消息栏中接受(拿到权限), 自己电脑操作要删除凭证
(3)git push -u origin master //B把A设置的别名也拿到了
    -u //记住推送地址和分支, 下次推送输入git push即可

git push -u origin_ssh dev //提交到开发分支  并且以后 git push 就是提交到dev分支  --set-upstream(同理)

远程仓库版本高于本地, 需要拉取远程最新版本
冲突:
(1)两个人同时修改了同一个文件的同一个地方, 后推送的推送不了
    a修改推送到远程, b再修改, 没有pull拉取最新的版本, B推送不了
    pull, 然后文件就会有变化, 删除不必要的, 然后add commit 推送push
(2)审核通过了才能推送,  fork到自己远程仓库, clone(自己的)修改好推送到远程仓库(自己的), 
     然后提交给程序员A, pull request, 填写一些信息, 发给A, 
     A程序员点击进去commit ->  files-change(查看)  -> merge pull request(确定合并)

============SSH 免登陆  
公钥在远程仓库中, 私钥在本地文件中
ssh-keygen生成秘钥
id_rsa  私钥   C:\Users\kajumin\.ssh     rsa非对称加密的意思
id_rsa_pub  私钥  添加到settings -> ssh中
git remote add origin_ssh git@github.com:kajumin/git-test.git   //设置ssh别名
git remote remove origin_ssh    //删除远程仓库别名
git push -u origin_ssh 分支名称  //推送远程仓库, 不需要密码
==============忽略清单
.gitignore 
===
node_modules
test.html

====================
其他命令:
vi  文件名
git rm 文件名

=====================husky
npm i -D husky@4  lint-staged(10) @commitlint/cli(12) @commitlint/config-conventional(12)
husky版本不能太高, 配置无效, 可以考虑删除.git -> hooks

====================配置git  一次性的, 不需要经常配置
--global是全局设置, 可以为项目单独设置
git config --global user.name kajumin   设置修改git提交人姓名
git config --global user.email 404107262@qq.com   设置修改git提交人邮箱
git config --list || -l  查看配置信息  直接操作配置文件C:\Users\kajumin

注意:  使用gitlab时设置环境跟github没有关系

==================修改配置文件 .git -> config
vi .git/config
退出: shift + '  -> q + enter
==================
git add A     //A目录
git checkout A    //A目录

===========
# 配置别名
$ git config --global alias.co checkout
# 删除全局配置
$ git config --global --unset alias.xxx   删除别名
$ git config --global --unset user.xxx   删除用户
# 查看系统配置
$ git config --list
# 查看暂存区的文件
$ git ls-files
