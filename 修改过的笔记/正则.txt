===================正则  
定义字符串的规则, 检测字符串是否符合规则, 将符合规则的内容提取出来
创建正则: 
(1) var reg = new RegExp('正则表达式', '匹配模式')
(2) var reg = /abc/g  字面量

修饰符: 
i: 忽略大小写
g: 全局匹配
s: dotAll模式  .代表一切字符


|       或
[]      字符集 也是或的关系
[^]   ^排除
()  分组   \1引用分组
^开头
$结尾
\      转义字符
.      任意字符  除了回车和换行之外所有的字符   需要s修饰符

注意: 
[A-z]  可以表示大小写字母集合
[\u4e00-\u9fa5]   中文

量词: 
{n}    真好n次
{m, n}  m-n次
{m, }  m个以上 
+  1个以上
*   0个或多个
?   0个或1个

字符集
\w    任意字母、数字、_  [A-z0-9_]
\W    除了字母、数字、_  [^A-z0-9_]
\d     任意的数字 [0-9]
\D     除了数字 [^0-9]
\s      空格
\S      除了空格
\b      单词边界
\B      除了单词边界

str.replace(/^\s* | \s*$/g,""); //去除首尾空格
 
正则方法: 
(1) reg.test(str)
(2) exec():  用于字符串匹配，返回数组  没有全局方法g

字符串中使用正则表达式: split search replace 
split      分隔字符串为数组  返回数组 没有全局方法g
search   搜索字符串中是否含有指定内容  返回第一次出现的索引  没有为-1  没有全局方法g

match  字符串中将符合条件的内容提取出来, 返回数组 
            有全局方法g时, 返回数组为每个匹配到的内容集合
            没有全局方法g, 返回第一个匹配的信息,  包含匹配内容  匹配的索引值index
replace 替换 将符合条件的内容替换指定字符, 返回替换后的字符串 有全局方法g 

===============中文
/[\u4E00-\u9FA5]/
===============手机号码
/1[3,4,5,6,7,8,9][0-9]{9}/

==============邮箱
/^([A-z0-9_\-\.])+\@([A-z0-9_\-\.])+\.([A-z]{2,4})$/

==============16进制颜色值
/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/

================qq号
/^[1-9][0-9]{4,10}$/

==============微信号
/^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/ 
